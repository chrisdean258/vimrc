" NORMAL CONFIGURATION SETTINGS {{{
"_______________________________________________________________________________________________________
	:syntax on
	:set nowrap
	:set number
	:set relativenumber
	:colorscheme elflord

	" Set line buffer at top and bottom of screen
	:set scrolloff=5
	:set sidescroll=1
	:set sidescrolloff=5

	" If you want 4 width tabs changes tabstop ad shiftwidth to 4
	:set tabstop=8
	:set softtabstop=-1
	:set shiftwidth=0
" }}}

" UNIVERSAL SETTINGS {{{
"_______________________________________________________________________________________________________

	:set nocompatible
	:set autoindent
	:set smartindent
	:set showcmd
	:set wildmenu
	:set hlsearch incsearch
	:set backspace=eol,indent,start
	:filetype plugin indent on
	:filetype plugin on

	" Allows for recursive finding
	:set path+=**

	:set omnifunc=syntaxcomplete#Complete

	" Comment out this group for auto commenting
	:autocmd FileType,BufNewFile,BufRead * :setlocal formatoptions-=cro
	:setlocal nofoldenable
	:setlocal foldtext=MyFold()

" }}}

" HIGHLIGHT SETTINGS {{{
"_______________________________________________________________________________________________________
 
	:highlight LongLine guifg=Red ctermfg=Red
 	:highlight Folded None
	:highlight Folded ctermfg=Black guifg=Black
	:highlight tablinefill None
	:highlight tablinesel None
	:highlight tabline None
	:highlight tablinesel ctermfg=DarkGrey guifg=DarkGrey
	:highlight tabline ctermfg=black guifg=black

	" Unhighlight the next two lines if you cant see your tabline
	" :highlight tabline ctermfg=DarkGrey guifg=DarkGrey
	" :highlight tablinesel ctermfg=Grey guifg=Grey

" }}}

" PLUGIN SETTINGS {{{
"_______________________________________________________________________________________________________

	:function! SourceOrInstallSyntastic()
	:  try
	:    execute pathogen#infect()
	:  catch
	:    if executable("git") != 1 || executable("curl") != 1
	:      echom "You need git and curl installed for the Syntastic auto install"
	:      return
	:    endif
	:    silent !mkdir -p ~/.vim/autoload ~/.vim/bundle && curl -LSso ~/.vim/autoload/pathogen.vim https://tpo.pe/pathogen.vim &> /dev/null
	:    silent !cd ~/.vim/bundle && git clone --depth=1 https://github.com/vim-syntastic/syntastic.git &> /dev/null
	:    execute pathogen#infect()
	:  endtry
	:endfunction

	:call SourceOrInstallSyntastic()

	:let g:syntastic_check_on_wq = 0
        :let g:syntastic_cpp_compiler = "g++"
        :let g:syntastic_cpp_compiler_options = "-std=c++1z"
" }}}

" UNVIVERSAL MAPPINGS {{{
"_______________________________________________________________________________________________________

	"mapleader
	:let mapleader = " "
	:let maplocalleader = '\'

	" insert a single char
	:nnoremap s i <esc>r
	:nnoremap S a <esc>r

	" key mapping
	:nnoremap j gj
	:nnoremap k gk

	:inoremap <expr> jk CleverEsc()
	:imap Jk jk
	:imap JK jk
	:noremap <space> <nop>jk

	" move lines up and down
	:nnoremap - ddp
	:nnoremap _ ddkP

	" indent file
	:nnoremap <silent><leader>g :call Indent()<CR>

	" edit and reload vimrc
	:nnoremap <silent><leader>ev :vsplit $MYVIMRC<CR>
	:nnoremap <silent><leader>sv :silent source $MYVIMRC<CR>
	:nnoremap <silent><leader>s% :source %<CR>


	" add an empty line right above or below current line
	:nnoremap <leader>o o<esc>
	:nnoremap <leader>O O<esc>


	" clear higlighting from search
	:nnoremap <silent><c-L> :nohlsearch<CR><c-L>

	" mapping for jumping to error
	:nnoremap <silent><A-up>   :lnext<CR>
	:nnoremap <silent><A-down> :lprev<CR>

	" Clever Tab
	:inoremap <S-tab> <c-x><c-f>

	" Wrapping
	:nnoremap <silent><leader>w :set opfunc=Wrap<CR>g@
	:vnoremap <silent><leader>w :call Wrap("visual")

	" Resizing split
	:nnoremap <silent><S-right> :vertical resize +5 <CR>
	:nnoremap <silent><S-left>  :vertical resize -5 <CR>
	:nnoremap <silent><S-up>    :resize +5 <CR>
	:nnoremap <silent><S-down>  :resize -5 <CR>

	" Jumping splits and tabs
	:nnoremap <leader>h <c-w>h
	:nnoremap <leader>j <c-w>j
	:nnoremap <leader>k <c-w>k
	:nnoremap <leader>l <c-w>l
	:nnoremap <silent><tab>         :tabnext<CR>
	:nnoremap <silent><S-tab>       :tabprev<CR>
	:nnoremap <silent><leader><tab> :tabnew<CR>

	" Window Compatibility
	" :inoremap <BS> <Left><Del>

	" Getting rid of pesky popup window
	:nnoremap q: :

" }}}

" UNIVERSAL ABBREVIATIONS AND COMMANDS {{{
"_______________________________________________________________________________________________________

	:cabbrev help vert help
	:cabbrev sp vs
	:cabbrev help vert help

	" Quitting cause Im bad at typing
	:cabbrev W w
	:cabbrev Q q
	:cabbrev Wq wq
	:cabbrev WQ wq
	:cabbrev jk SyntasticReset
	:cabbrev unicode Unicode

	:command! MakeTags !ctags -R
	:command! Unicode set encoding=utf-8
	:command! S %s
	:command! A 'a,.s

" }}}

" AUTOCMD GROUPS  {{{
"_______________________________________________________________________________________________________

	" Option Autocmds
	" {{{
	:augroup Options
	:autocmd!
	:autocmd OptionSet relativenumber :let &number=&relativenumber
	:autocmd OptionSet wrap           :let &linebreak=&wrap
	:augroup END
	" }}}

	" C style formatting
	" {{{
	:augroup c_style
	:  autocmd!
	:  autocmd FileType c,cpp,javascript,java,perl,cs :nnoremap <silent><buffer><localleader>\ :call CommentBL('\/\/', '')<CR>
	:  autocmd FileType c,cpp,javascript,java,perl,cs :nnoremap <silent><buffer><localleader>s :silent call SplitIf()<CR>
	:  autocmd FileType c,cpp,javascript,java,perl,cs :inoremap <buffer>{} {<CR>}<esc>O
	:  autocmd FileType c,cpp,javascript,java,perl,cs :inoremap <expr><buffer><tab> CleverTab()
	:  autocmd FileType c,cpp,javascript,java,perl,cs :setlocal cindent
	:  autocmd FileType c,cpp,javascript,java,perl,cs :iabbrev <buffer>csign <c-r>=Csign()<CR>
	:  autocmd FileType c,cpp,javascript,java,perl,cs :call RemoveTrailingWhitespace_AU()
	:augroup END
	" }}}

	" C/cpp specific
	" {{{
	:augroup c_cpp
	:  autocmd!
	:  autocmd FileType cpp    :iabbrev <buffer> nstd using namespace std;<CR>
	:  autocmd FileType c,cpp  :iabbrev <buffer> #i #include
	:  autocmd FileType c,cpp  :iabbrev <buffer> cahr char
	:  autocmd FileType cpp    :iabbrev <buffer> enld endl
	:  autocmd FileType c,cpp  :iabbrev <buffer> main <C-R>=MainAbbrev()<CR>
	:  autocmd FileType c      :autocmd CursorMoved,CursorMovedI <buffer> call HighlightAfterColumn(80)
	:  autocmd FileType cpp    :autocmd CursorMoved,CursorMovedI <buffer> call HighlightAfterColumn(80)
	:augroup END
	" }}}

	" Web
	" {{{
	:augroup web
	:  autocmd!
	:  autocmd FileType html,php :setlocal tabstop=2
	:  autocmd FileType html,php :setlocal expandtab
	:  autocmd FileType html,php :setlocal wrap
	:  autocmd FileType html,php :setlocal linebreak
	:  autocmd FileType html,php :setlocal breakindent
	:  autocmd FileType html,php :nnoremap <silent><buffer><localleader>\ :call CommentBL('\<!--', '-->')<CR>
	" here
	:  autocmd FileType html,php :inoremap <silent><buffer>> ><esc>:call EndTagHTML()<CR>a
	:  autocmd FileType html,php :inoremap <expr><buffer><CR> HTMLCarriageReturn()
	:  autocmd FileType html,php :inoremap <expr><buffer><tab> CleverTab()
	:augroup END
	" }}}

	" Python formatting
	" {{{
	:augroup python_
	:  autocmd!
	:  autocmd FileType python,matlab,shell,sh,bash  :nnoremap <silent><buffer><localleader>\ :call CommentBL('#', '')<CR>
	:  autocmd FileType python,matlab,shell,sh,bash  :inoremap <buffer><tab> <C-R>=CleverTab()<CR>
	:  autocmd FileType python  :inoremap <buffer><BS> <C-R>=ExpandedTabBackSpace()<CR>
	:  autocmd FileType python  :setlocal tabstop=4
	:  autocmd FileType python  :setlocal softtabstop=0
	:  autocmd FileType python  :setlocal shiftwidth=4
	:  autocmd FileType python  :setlocal expandtab
	:  autocmd FileType python  :call RemoveTrailingWhitespace_AU()
	:augroup END
	" }}}

	" Vim file
	" {{{
	:augroup vim_
	:  autocmd!
	:  autocmd FileType vim :nnoremap <silent><buffer><localleader>\ :call CommentBL('" ', "")<CR>
	:  autocmd FileType vim :setlocal foldmethod=marker
	:  autocmd FileType vim :inoremap <buffer><tab> <C-R>=CleverTab()<CR>
	:augroup END
	" }}}

	" Markdown
	" {{{
	:augroup Markdown
	:autocmd!
	:autocmd Filetype markdown  :inoremap <buffer><tab> <C-R>=MDTabReplacement()<CR>
	:autocmd Filetype markdown  :nnoremap <buffer>o :execute "normal! " . MDNewlineReplacement("o")<CR>a
	:autocmd Filetype markdown  :inoremap <buffer><CR> <C-R>=MDNewlineReplacement("\r")<CR>
	:autocmd Filetype markdown  :setlocal wrap
	:autocmd Filetype markdown  :setlocal linebreak
	:autocmd Filetype markdown  :setlocal breakindent
	" :autocmd Filetype markdown  :setlocal spell spelllang=en_u
	" :autocmd Filetype markdown  :nnoremap <buffer><localleader>sp mq[s1z=`q
	" :autocmd Filetype markdown  :nnoremap <buffer><localleader>h1 "qyy"qpVr=
	" :autocmd Filetype markdown  :nnoremap <buffer><localleader>h2 "qyy"qpVr-
	:augroup END
	" }}}

	" txt files
	" {{{
	:augroup Text
	:autocmd!
	:autocmd BufRead,BufNewFile *.txt :setlocal wrap
	:autocmd BufRead,BufNewFile *.txt :setlocal encoding=utf-8
	:autocmd BufRead,BufNewFile *.txt :setlocal linebreak
	:autocmd BufRead,BufNewFile *.txt :setlocal breakindent
	:augroup END
	" }}}

	" Assembly
	" {{{
	:augroup Assembly
	:autocmd!
	:autocmd BufRead,BufNewFile *.S :nnoremap <silent><buffer><localleader>\ :call CommentBL('\/\/', '')<CR>
	:augroup END
	" }}}

	" Notes
	" {{{
	:augroup Notes
	:autocmd!
	:autocmd BufRead,BufNewFile *.notes* :nnoremap <buffer><localleader>s :call SpellReplace()<CR>
	:autocmd BufRead,BufNewFile *.notes* :inoremap <buffer><localleader>s <esc>:call SpellReplace()<CR>a
	:autocmd BufRead,BufNewFile *.notes* :iabbrev <buffer>w/ with
	:autocmd BufRead,BufNewFile *.notes* :setlocal spell
	:autocmd BufRead,BufNewFile *.notes* :setlocal spelllang=en
	:autocmd BufRead,BufNewFile *.notes.md :cabbrev md call NotesMDFormat()
	:augroup END
	" }}}

	" Homework
	" {{{
	:augroup hw
	:autocmd!
	:autocmd BufRead,BufNewFile *.hw :nnoremap <buffer><localleader>s :call SpellReplace()<CR>
	:autocmd BufRead,BufNewFile *.hw :inoremap <buffer><localleader>s <esc>:call SpellReplace()<CR>a
	:autocmd BufRead,BufNewFile *.hw :inoremap <buffer><tab> <C-R>=CleverTab()<CR>
	:autocmd BufRead,BufNewFile *.hw :setlocal spell
	:autocmd BufRead,BufNewFile *.hw :setlocal spelllang=en
	:autocmd BufRead,BufNewFile *.hw :setlocal wrap
	:autocmd BufRead,BufNewFile *.hw :setlocal linebreak
	:autocmd BufRead,BufNewFile *.hw :setlocal syntax=
	:augroup END
	" }}}
" }}}
